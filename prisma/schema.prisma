// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  groupIds String[] @db.ObjectId
  groups   Group[]  @relation(fields: [groupIds], references: [id])

  seenMeetingIds String[]  @db.ObjectId
  seenMeetings   Meeting[] @relation("Generated", fields: [seenMeetingIds], references: [id])

  accounts Account[]
  meetings Meeting[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Group {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  lastMeetingAt  DateTime @default(now())
  name           String?
  isOrganization Boolean?

  meetingIds String[]  @db.ObjectId
  meetings   Meeting[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Meeting {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String?
  text      String?
  link      String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Generated", fields: [seenIds], references: [id])

  groupId String  @db.ObjectId
  group   Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  userId  String? @db.ObjectId
  User    User?   @relation(fields: [userId], references: [id])
}
